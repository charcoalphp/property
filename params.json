{"name":"Charcoal-property","tagline":"","body":"Charcoal Property\r\n=================\r\n\r\nProperties define objects (metadata).\r\n\r\n# How to install\r\n\r\nThe preferred (and only suppported) way of installing _charcoal-property_ is with **composer**:\r\n\r\n```shell\r\n$ composer require locomotivemtl/charcoal-property\r\n```\r\n\r\n## Dependencies\r\n- [`PHP 5.5+`](http:///php.net)\r\n\r\n# Property options\r\n\r\nThe basic property interface requires the following methods:\r\n\r\n| Name           | (V) | Type                | Description\r\n| -------------- | :-: | ------------------- | -----------\r\n| **val**        |     | _mixed_             |  The actual property's data value.\r\n| **label**      |     | _TranslationString_ | ...\r\n| **l10n**       |     | _bool_              | If true, then the data should be stored in a l10n-aware structure (be translatable).s\r\n| **hidden**     |     | _bool_              |\r\n| **multiple**   |     | _bool_              | Multiple values can be held and stored, if true.\r\n| **required**   |  âœ“  | _bool_              |\r\n| **unique**     |  âœ“  | _bool_              |\r\n| **allow_null** |  âœ“  | _bool_              |\r\n| **storable**   |     | _bool_              |\r\n| **active**     |     | _bool_              |\r\n<small>(V) indicates options used in validation</small>\r\n\r\n### Data retrieval\r\n\r\nThe _raw_ data held in a property can be accessed with `set_val()` and `val()`.\r\nTo get a string-safe, displaybale value, use `display_val()`. To get the storage-ready format, use `storage_val()`.\r\n\r\n> âš  Even for string properties `val()` is not sure to return string values (a property can be multiple, or l10n, for example) so use `display_val()` when working with displayable stirng is crucial.\r\n\r\n## Default validation\r\n\r\nValidation is provided with a `Validator` object, from charcoal-core.\r\n\r\n- `required`\r\n- `unique`\r\n- `allow_null`\r\n\r\n## Source and storage methods\r\n\r\nProperties need 3 method to integrate with a SQL source:\r\n\r\n- `sql_extra()` _string_ Raw SQL string that will be appended to\r\n- `sql_type()` _string_ The SQL column type (ex: `VARCHAR(16)`)\r\n- `sql_pdo_type()` _integer_ The PDO column type (ex: `PDO::PARAM_STR`)\r\n\r\n> ðŸ‘‰ Those methods are _abstract_ and therefore must be implemented in actual properties.\r\n\r\n# Types of properties\r\n\r\n- [Boolean](#boolean-property)\r\n- ~~Color~~\r\n- ~~Date~~\r\n  - [Datetime](#datetime-property)\r\n  - ~~Day~~\r\n  - ~~Month~~\r\n  - ~~Time~~\r\n  - ~~Year~~\r\n- [File](#file-property)\r\n  - [Audio](#file-audio-property)\r\n  - [Image](#image-property)\r\n  - ~~Video~~\r\n- [Lang](#lang-property)\r\n- [Number](#number-property)\r\n  - ~~Float~~\r\n  - ~~Integer~~\r\n- [Object](#object-property)\r\n- Id\r\n- [String](#string-property)\r\n  - [Html](#html-string-property)\r\n  - [Password](#password-string-property)\r\n  - [Phone](#phone-string-property)\r\n  - [Text](#text-string-propery)\r\n- ~~Structure~~\r\n  - [MapStructure](#map-structure-property)\r\n\r\nRetrieve\r\n\r\n## Boolean Property\r\n\r\nThe boolean property is one of the simplest possible: it simply holds boolean (`true` / `false`) values.\r\n\r\n### Boolean Property options\r\n\r\nThe boolean property adds the following concepts to the [basic property options](#basic-property-options):\r\n\r\n| Name            | (V) | Type                | Description\r\n| --------------- | :-: | ------------------- | -----------\r\n| **true_label**  |  âœ“  | _DateTime_          | ...\r\n| **max**         |  âœ“  | _DateTime_          | ...\r\n| **format**      |     | _string_            |\r\n<small>(V) indicates options used in validation</small>\r\n\r\n> âš  Boolean properties can not be multiple. (`multiple()` will always return false). Calling `set_multiple(true)` will throw an exception\r\n\r\n## Datetime Property\r\n\r\nThe datetime property store a date (and time) value.\r\n\r\n### Datetime Property options\r\n\r\nThe datetime property adds the following concepts to the [basic property options](#basic-property-options):\r\n\r\n| Name            | (V) | Type                | Description\r\n| --------------- | :-: | ------------------- | -----------\r\n| **min**         |  âœ“  | _DateTime_          | ...\r\n| **max**         |  âœ“  | _DateTime_          | ...\r\n| **format**      |     | _string_            |\r\n<small>(V) indicates options used in validation</small>\r\n\r\n> âš  Datetime properties can not be multiple. (`multiple()` will always return false). Calling `set_multiple(true)` will throw an exception\r\n\r\n## File Property\r\n\r\nFile property holds an uploadable file.\r\n\r\n### Values\r\n\r\nNote that only a _relative_<sup>1</sup> file path should be stored in the database.\r\n\r\n<sup>1</sup> Relative to project's `ROOT` + the property's `upload_path`.\r\n\r\n### File Property options\r\n\r\nThe file property adds the following concepts to the [basic property options](#basic-property-options):\r\n\r\n| Name                  | (V) | Type        | Description\r\n| --------------------- | :-: | ----------- | -----------\r\n| **upload_path**       |     | _string_  | The folder, relative to `ROOT`, where the file will be uploaded to.\r\n| **overwrite**         |     | _bool_  | If true, when a target file already exists it will be overwrited. If false, a new unique name will be generated (with a suffix).\r\n| **accepted_mimeypes** |  âœ“  | _string[]_  | List of accepted mimetypes. Empty / null to accept all types.\r\n| **max_filesize**      |  âœ“  | _integer_   | Maximum alowed file size, in bytes.\r\n<small>(V) indicates options used in validation</small>\r\n\r\n### Additional file methods\r\n\r\n- `mimetype()` and `set_mimetype()`\r\n- `filesize()` and `set_filesize()`\r\n- `data_upload()`\r\n- `file_upload()`\r\n\r\n### Specialized File properties\r\n\r\n- [`AudioProperty`](#audio-file-property)\r\n- [`PasswordProperty`](#image-file-property)\r\n- [`PhoneProperty`](#phone-string-property)\r\n- ~~VideoProperty~~\r\n\r\n## Audio File Property\r\n\r\nAudio property are specialized [file property](#file-property) thay may only contain audio data.\r\n\r\n### Accepted mimetypes\r\n\r\nThe `AudioProperty` extends `FileProperty` therefore provides \"accepted mimetypes\".\r\n\r\nDefault accepted mimetypes are:\r\n\r\n- `audio/mp3`\r\n- `audio/mpeg`\r\n- `audio/wav`\r\n- `audio/x-wav`.\r\n\r\n### Audio file Property options\r\n\r\nThe audio property adds the following concepts to the [file property options](#file-property-options):\r\n\r\n| Name            | (V) | Type                | Description\r\n| --------------- | :-: | ------------------- | -----------\r\n| **min_length**  |  âœ“  | _DateTime_          | Minimum audio length, in seconds.\r\n| **max_length**  |  âœ“  | _DateTime_          | Maximum audio length, in seconds.\r\n<small>(V) indicates options used in validation</small>\r\n\r\n## Image File Property\r\n\r\nImage property are specialized [file property](#file-property) thay may only contain image data.\r\n\r\n### Accepted mimetypes\r\n\r\nThe `ImageProperty` extends `FileProperty` therefore provides \"accepted mimetypes\".\r\n\r\nDefault accepted mimetypes are:\r\n\r\n- `image/gif`\r\n- `image/jpg`\r\n- `image/jpeg`\r\n- `image/pjpeg`\r\n- `image/png`\r\n- `image/svg+xml`\r\n\r\n### Image file Property options\r\n\r\nThe audio property adds the following concepts to the [file property options](#file-property-options):\r\n\r\n| Name            | (V) | Type                | Description\r\n| --------------- | :-: | ------------------- | -----------\r\n| **effects**     |  âœ“  | _array_             | Array of `charcoal-image` effects options.\r\n<small>(V) indicates options used in validation</small>\r\n\r\n\r\n## Lang Property\r\n\r\nLanguage properties hold a language value.\r\n\r\n## Number Property\r\n\r\nNumber properties hold any kind of numeric data.\r\n\r\n## Object Property\r\n\r\nObject properties hold a reference to an external object of a certain type.\r\n\r\n### Values\r\n\r\nThe target's `identifer` (determined by its _obj-type_'s `key`, which is typically \"id\") is the only thing held in the value / stored in the database. When displayed (with `display_val()`), a string representation of the object should be rendered.\r\n\r\n### Object Property options\r\n\r\nThe object property adds the following concepts to the [basic property options](#basic-property-options):\r\n\r\n| Name            | (V) | Type                | Description\r\n| --------------- | :-: | ------------------- | -----------\r\n| **obj-type**    |  âœ“  | _string_            | The target object's type. In a string format that can be fetched with a `ModelFactory`. |\r\n<small>(V) indicates options used in validation</small>\r\n\r\n## String Property\r\n\r\n### String Property options\r\n\r\nThe string property adds the following concepts to the basic property options:\r\n\r\n| Name            | (V) | Type                | Description\r\n| --------------- | :-: | ------------------- | -----------\r\n| **max_length**  |  âœ“  | _integer_           | Maximum allowed length, in (_multibytes_) characters. |\r\n| **min_length**  |  âœ“  | _integer_           | Minimum allowed length, in (_multibytes_) characters. |\r\n| **regexp**      |  âœ“  | _string_            | A validation regular expression that must be matched exactly. |\r\n| **allow_empty** |  âœ“  | _bool_              | If empty strings are allowed.\r\n<small>(V) indicates options used in validation</small>\r\n\r\n### String default data\r\n\r\nBy default, the `string` property is targetted at small string (a maximum length) of `255` characters\r\n\r\n### Specialized String properties\r\n\r\n- [`HtmlProperty`](#html-string-property)\r\n- [`PasswordProperty`](#password-string-property)\r\n- [`PhoneProperty`](#phone-string-property)\r\n- [`TextProperty`](#text-string-property)\r\n\r\n## Html String Property\r\n\r\nHTML properties are specialized [string property](#string-property) that may only contain HTML strings (instead of plain string).\r\n\r\n## Password String Property\r\n\r\nPassword properties are specialized [string property](#string-property) that holds (encrypted) password data.\r\n\r\nEncryption is performed with PHP's `password_hash` function.\r\n\r\n## Phone String Property\r\n\r\nPhone properties are specialized [string property](#string-property) that holds a phone number.\r\n\r\nRight now, only \"north-american\" phone number styles are supported.\r\n\r\n## Text String Property\r\n\r\nText properties are specialized [string property](#string-property) thay typically holds longer text strings.\r\n\r\n## Map Structure Property\r\n\r\nMap structure properties hold complex map structure data, which can be points (markers), lines and / or polygons.\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}